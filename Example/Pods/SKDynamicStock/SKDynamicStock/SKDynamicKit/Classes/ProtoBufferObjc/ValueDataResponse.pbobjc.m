// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ValueData_Response.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ValueDataResponse.pbobjc.h"
 #import "ValueDataRequest.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ValueDataResponseRoot

@implementation ValueDataResponseRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ValueDataResponseRoot_FileDescriptor

static GPBFileDescriptor *ValueDataResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ValueData_Response

@implementation ValueData_Response

@dynamic hasRequestParams, requestParams;
@dynamic goodsTime;
@dynamic fieldValue, fieldValue_Count;
@dynamic exchange;
@dynamic category;
@dynamic tradeSession;

typedef struct ValueData_Response__storage_ {
  uint32_t _has_storage_[1];
  uint32_t exchange;
  uint32_t tradeSession;
  ValueData_Request *requestParams;
  GPBInt32ObjectDictionary *fieldValue;
  uint64_t goodsTime;
  uint64_t category;
} ValueData_Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestParams",
        .dataTypeSpecific.className = GPBStringifySymbol(ValueData_Request),
        .number = ValueData_Response_FieldNumber_RequestParams,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValueData_Response__storage_, requestParams),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "goodsTime",
        .dataTypeSpecific.className = NULL,
        .number = ValueData_Response_FieldNumber_GoodsTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValueData_Response__storage_, goodsTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "fieldValue",
        .dataTypeSpecific.className = NULL,
        .number = ValueData_Response_FieldNumber_FieldValue,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ValueData_Response__storage_, fieldValue),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exchange",
        .dataTypeSpecific.className = NULL,
        .number = ValueData_Response_FieldNumber_Exchange,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ValueData_Response__storage_, exchange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "category",
        .dataTypeSpecific.className = NULL,
        .number = ValueData_Response_FieldNumber_Category,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ValueData_Response__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tradeSession",
        .dataTypeSpecific.className = NULL,
        .number = ValueData_Response_FieldNumber_TradeSession,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ValueData_Response__storage_, tradeSession),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ValueData_Response class]
                                     rootClass:[ValueDataResponseRoot class]
                                          file:ValueDataResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValueData_Response__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
