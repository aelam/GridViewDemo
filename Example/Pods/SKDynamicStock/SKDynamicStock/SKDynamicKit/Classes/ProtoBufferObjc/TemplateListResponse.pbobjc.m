// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TemplateList_Response.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "TemplateListResponse.pbobjc.h"
 #import "SortedListResponse.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TemplateListResponseRoot

@implementation TemplateListResponseRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TemplateListResponseRoot_FileDescriptor

static GPBFileDescriptor *TemplateListResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TemplateList_Response

@implementation TemplateList_Response

@dynamic rankListResponseArray, rankListResponseArray_Count;

typedef struct TemplateList_Response__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rankListResponseArray;
} TemplateList_Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankListResponseArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TemplateList_Response_Response),
        .number = TemplateList_Response_FieldNumber_RankListResponseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TemplateList_Response__storage_, rankListResponseArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TemplateList_Response class]
                                     rootClass:[TemplateListResponseRoot class]
                                          file:TemplateListResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TemplateList_Response__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TemplateList_Response_Response

@implementation TemplateList_Response_Response

@dynamic templateName;
@dynamic hasTemplateRankResponse, templateRankResponse;

typedef struct TemplateList_Response_Response__storage_ {
  uint32_t _has_storage_[1];
  NSString *templateName;
  SortedList_Response *templateRankResponse;
} TemplateList_Response_Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "templateName",
        .dataTypeSpecific.className = NULL,
        .number = TemplateList_Response_Response_FieldNumber_TemplateName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TemplateList_Response_Response__storage_, templateName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "templateRankResponse",
        .dataTypeSpecific.className = GPBStringifySymbol(SortedList_Response),
        .number = TemplateList_Response_Response_FieldNumber_TemplateRankResponse,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TemplateList_Response_Response__storage_, templateRankResponse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TemplateList_Response_Response class]
                                     rootClass:[TemplateListResponseRoot class]
                                          file:TemplateListResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TemplateList_Response_Response__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(TemplateList_Response)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
